name: Generate Story

on:
  workflow_dispatch:

jobs:
  run-inline-python:
    runs-on: ubuntu-latest

    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Run inline Python script
      run: |
        python - <<EOF
        import requests
        import json
        import re
        import time

        url = "https://openrouter.ai/api/v1/chat/completions"
        headers = {
            "Authorization": "Bearer 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",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://your-site.com",
            "X-Title": "Your Site Name"
        }

        outline_points = [
            "Protagonist receives a mysterious letter with no return address.",
            "The letter warns of a danger that will strike in 24 hours.",
            "Protagonist initially ignores it but strange events start happening.",
            "Protagonist decides to investigate the letter further.",
            "An unexpected ally appears to help the protagonist.",
            "Danger escalates forcing protagonist to flee.",
            "Secrets about protagonist’s past are revealed.",
            "Climax confrontation with antagonist.",
            "Protagonist overcomes the threat but at a cost.",
            "Resolution and new beginning for protagonist."
        ]

        def clean_story_output(raw_text):
            lines = raw_text.splitlines()
            cleaned_lines = []
            skip_patterns = [
                r'^\\s*(\\*+|---+|###*|Point \\d+.*|End of.*|Preparation for.*|Continuity Notes.*|Please Provide.*|Generating story.*|Context.*|Tone:.*|Events:.*|Character Development:.*|NOTE:.*)',
                r'.*outline.*'
            ]
            for line in lines:
                if any(re.match(pattern, line, re.IGNORECASE) for pattern in skip_patterns):
                    continue
                if "NOTE:" in line or line.strip().endswith(":"):
                    continue
                cleaned_lines.append(line)
            return '\\n'.join(cleaned_lines).strip()

        def generate_story_part(point, context, is_first=False, is_last=False):
            if is_first:
                prompt = f"You are a professional storyteller.\\nBegin the story from scratch using the outline point below.\\nThis is the very beginning, so introduce the protagonist, setting, and tone naturally.\\nOutline Point: {point}\\n\\nWrite at least 500 words for this section.\\nMake sure to set the stage clearly and begin the narrative with no assumed prior events.\\nPlease ONLY provide the story narrative in plain text.\\nDo NOT include any titles, section headers, explanations, or any text outside of the story.\\nWrite naturally and engagingly as if for a novel or screenplay.\\n"
            elif is_last:
                prompt = f"You are a professional storyteller.\\nUse the outline point below to write the final part of the story.\\nThis is the ending, so conclude the narrative in a satisfying and emotionally resonant way.\\nTie up any loose threads and reflect on the protagonist’s journey.\\nOutline Point: {point}\\n\\nPrevious Story Context:\\n{context}\\n\\nWrite at least 500 words for this section.\\nEnsure consistency in characters, tone, and events.\\nDo NOT introduce new subplots or major characters.\\nPlease ONLY provide the story narrative in plain text.\\nDo NOT include any titles, section headers, explanations, or any text outside of the story.\\nWrite naturally and engagingly as if for a novel or screenplay.\\n"
            else:
                prompt = f"You are a professional storyteller.\\nBased on the outline point below, continue the story coherently using the context provided.\\nOutline Point: {point}\\n\\nPrevious Story Context:\\n{context}\\n\\nWrite at least 500 words for this section.\\nMake sure to keep characters, tone, and events consistent throughout.\\nPlease ONLY provide the story narrative in plain text.\\nDo NOT include any titles, section headers, explanations, or any text outside of the story.\\nWrite naturally and engagingly as if for a novel or screenplay.\\n"

            data = {
                "model": "nvidia/llama-3.3-nemotron-super-49b-v1:free",
                "messages": [
                    {"role": "user", "content": prompt}
                ]
            }

            response = requests.post(url, headers=headers, data=json.dumps(data))
            if response.status_code == 200:
                result = response.json()
                raw_story = result['choices'][0]['message']['content']
                return clean_story_output(raw_story)
            else:
                print(f"Error {response.status_code}: {response.text}")
                return None

        def main():
            full_story = ""

            for idx, point in enumerate(outline_points, start=1):
                print(f"--- Generating story part {idx} ---")
                is_first = idx == 1
                is_last = idx == len(outline_points)
                story_part = generate_story_part(point, full_story, is_first=is_first, is_last=is_last)
                if story_part:
                    print(story_part)
                    print("\\n")
                    full_story += "\\n" + story_part
                    time.sleep(1)
                else:
                    print(f"Failed to generate part {idx}. Stopping.")
                    break

            print("--- FULL STORY GENERATED ---")

        if __name__ == "__main__":
            main()
        EOF
