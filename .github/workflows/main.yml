name: Generate Story from Outline

on:
  push:
    branches:
      - main

jobs:
  generate-story:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run Story Generator
        run: |
          python - <<EOF
          import requests
          import json
          import re
          import time

          url = "https://openrouter.ai/api/v1/chat/completions"
          headers = {
              "Authorization": "Bearer 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",
              "Content-Type": "application/json",
              "HTTP-Referer": "https://your-site.com",
              "X-Title": "Story Generator"
          }

          outline_points = [
              "Protagonist receives a mysterious letter with no return address.",
              "The letter warns of a danger that will strike in 24 hours.",
              "Protagonist initially ignores it but strange events start happening.",
              "Protagonist decides to investigate the letter further.",
              "An unexpected ally appears to help the protagonist.",
              "Danger escalates forcing protagonist to flee.",
              "Secrets about protagonistâ€™s past are revealed.",
              "Climax confrontation with antagonist.",
              "Protagonist overcomes the threat but at a cost.",
              "Resolution and new beginning for protagonist."
          ]

          def clean_story_output(raw_text):
              lines = raw_text.splitlines()
              cleaned_lines = []
              skip_patterns = [
                  r'^\s*(\*+|---+|###*|Point \d+.*|End of.*|Preparation for.*|Continuity Notes.*|Please Provide.*|Generating story.*|Context.*|Tone:.*|Events:.*|Character Development:.*|NOTE:.*)',
                  r'.*outline.*'
              ]
              for line in lines:
                  if any(re.match(pattern, line, re.IGNORECASE) for pattern in skip_patterns):
                      continue
                  if "NOTE:" in line or line.strip().endswith(":"):
                      continue
                  cleaned_lines.append(line)
              return '\n'.join(cleaned_lines).strip()

          def generate_story_part(point, context, is_first, is_last):
              start_tag = "Start the story as the beginning of a novel.\n" if is_first else ""
              end_tag = "\nEnd the story as a proper resolution to a novel." if is_last else ""
              prompt = (
                  f"You are a professional storyteller.\n"
                  f"Based on the outline point below, continue the story coherently using the context provided.\n"
                  f"Outline Point: {point}\n\n"
                  f"Previous Story Context:\n{context}\n\n"
                  f"Focus: Write at least 500 words for the current outline point.\n"
                  f"Instructions: Emphasize consistency in characters, tone, and events.\n"
                  f"{start_tag}"
                  f"Please ONLY provide the story narrative in plain text.\n"
                  f"Do NOT include any titles, section headers, explanations, or any text outside of the story.\n"
                  f"Write naturally and engagingly as if for a novel or screenplay."
                  f"{end_tag}"
              )
              data = {
                  "model": "nvidia/llama-3.3-nemotron-super-49b-v1:free",
                  "messages": [
                      {"role": "user", "content": prompt}
                  ]
              }
              response = requests.post(url, headers=headers, data=json.dumps(data))
              if response.status_code == 200:
                  result = response.json()
                  raw_story = result['choices'][0]['message']['content']
                  return clean_story_output(raw_story)
              else:
                  print(f"Error {response.status_code}: {response.text}")
                  return None

          def main():
              full_story = ""
              for idx, point in enumerate(outline_points):
                  print(f"--- Generating story part {idx+1} ---")
                  story_part = generate_story_part(
                      point,
                      full_story,
                      is_first=(idx == 0),
                      is_last=(idx == len(outline_points) - 1)
                  )
                  if story_part:
                      print(story_part)
                      print("\n")
                      full_story += "\n" + story_part
                      time.sleep(2)
                  else:
                      print(f"Failed to generate part {idx+1}. Stopping.")
                      break
              print("--- FULL STORY GENERATED ---")

          if __name__ == "__main__":
              main()
          EOF
