name: Generate Story from Outline

on:
  workflow_dispatch:
    inputs:
      outline_text:
        description: 'Story outline (each point on a new line)'
        required: true
        type: string

permissions:
  contents: write  # Required for pushing to repo

jobs:
  generate-story:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Run Story Generator
      env:
        INPUT_OUTLINE_TEXT: ${{ github.event.inputs.outline_text }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      run: |
        python3 - <<EOF
        import os
        import json
        import time
        import requests
        import re

        outline_text = os.getenv("INPUT_OUTLINE_TEXT", "")
        outline_sections = re.split(r'\\n(?=\\d+\\.\\s)', outline_text.strip())
        outline_points = [section.strip() for section in outline_sections if section.strip()]

        url = "https://openrouter.ai/api/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {os.getenv('OPENROUTER_API_KEY')}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://your-site.com",
            "X-Title": "Story Generator"
        }

        def clean_story_output(raw_text):
            lines = raw_text.splitlines()
            cleaned_lines = []
            skip_patterns = [
                r'^\\s*(\\*+|---+|###*|Point \\d+.*|End of.*|Preparation for.*|Continuity Notes.*|Please Provide.*|Generating story.*|Context.*|Tone:.*|Events:.*|Character Development:.*|NOTE:.*)',
                r'.*outline.*'
            ]
            for line in lines:
                if any(re.match(pattern, line, re.IGNORECASE) for pattern in skip_patterns):
                    continue
                if "NOTE:" in line or line.strip().endswith(":"):
                    continue
                cleaned_lines.append(line)
            return '\\n'.join(cleaned_lines).strip()

        def get_ending_paragraphs(full_story, num_paragraphs=3):
            """Extract the last 2-3 paragraphs from the story"""
            if not full_story.strip():
                return ""
            
            # Split by double newlines (paragraph breaks) or single newlines if no double breaks
            paragraphs = re.split(r'\\n\\s*\\n', full_story.strip())
            if len(paragraphs) == 1:
                paragraphs = full_story.strip().split('\\n')
            
            # Filter out empty paragraphs
            paragraphs = [p.strip() for p in paragraphs if p.strip()]
            
            # Get the last few paragraphs
            ending_paragraphs = paragraphs[-num_paragraphs:] if len(paragraphs) >= num_paragraphs else paragraphs
            
            return '\\n\\n'.join(ending_paragraphs)

        def generate_story_summary(full_story, current_point_index):
            """Generate a concise summary of the story so far"""
            if not full_story.strip():
                return ""
            
            # Create summary prompt
            summary_prompt = (
                f"Please provide a brief 2-3 sentence summary of the key events and character developments in this story excerpt. "
                f"Focus on what's most important for continuing the narrative:\\n\\n{full_story[-1500:]}"
            )
            
            data = {
                "model": "nvidia/llama-3.3-nemotron-super-49b-v1:free",
                "messages": [
                    {"role": "user", "content": summary_prompt}
                ]
            }
            
            try:
                response = requests.post(url, headers=headers, data=json.dumps(data))
                if response.status_code == 200:
                    result = response.json()
                    summary = result['choices'][0]['message']['content'].strip()
                    # Clean up the summary
                    summary = re.sub(r'^(Summary:|Here\'s a summary:)', '', summary, flags=re.IGNORECASE).strip()
                    return summary
                else:
                    return f"Story continues from part {current_point_index-1}"
            except:
                return f"Story continues from part {current_point_index-1}"

        def extract_story_elements(full_story):
            """Extract key story elements to maintain consistency"""
            if not full_story.strip():
                return ""
            
            # Create a summary of key elements
            summary_parts = []
            
            # Try to identify main character names (capitalized words that appear multiple times)
            words = re.findall(r'\\b[A-Z][a-z]+\\b', full_story)
            char_counts = {}
            for word in words:
                if len(word) > 2 and not word.lower() in ['the', 'and', 'but', 'she', 'her', 'his', 'him']:
                    char_counts[word] = char_counts.get(word, 0) + 1
            
            main_chars = [char for char, count in char_counts.items() if count >= 2][:3]
            if main_chars:
                summary_parts.append(f"Main characters: {', '.join(main_chars)}")
            
            return "; ".join(summary_parts) if summary_parts else ""

        def generate_story_part(point, full_story, index, total):
            is_first = index == 1
            is_last = index == total
            
            # Get summary and ending paragraphs for continuity
            story_summary = generate_story_summary(full_story, index) if not is_first else ""
            ending_paragraphs = get_ending_paragraphs(full_story) if not is_first else ""
            story_elements = extract_story_elements(full_story)

            if is_first:
                prompt = (
                    f"You are a master storyteller who writes THRILLING, FAST-PACED fiction.\\n"
                    f"Begin this story with IMMEDIATE ACTION and TENSION. No slow buildup!\\n"
                    f"Outline Point: {point}\\n\\n"
                    f"CRITICAL WRITING RULES:\\n"
                    f"- START with dialogue, action, or conflict - NO boring descriptions\\n"
                    f"- Every paragraph must advance the plot or reveal character\\n"
                    f"- Include surprise twists, cliffhangers, and emotional peaks\\n"
                    f"- Use SHORT, punchy sentences mixed with longer ones for rhythm\\n"
                    f"- Make readers feel they're on a rollercoaster - constant ups and downs\\n"
                    f"- Cut ALL unnecessary details - focus on what matters\\n"
                    f"- End with a HOOK that makes readers desperate for more\\n"
                    f"- Use vivid, cinematic language that creates movie scenes in readers' minds\\n"
                    f"- Include internal conflict and external action happening simultaneously\\n"
                    f"Write 500+ words of GRIPPING narrative that keeps readers glued to the page.\\n"
                    f"ONLY provide the story - no titles, headers, or explanations.\\n"
                )
            elif is_last:
                prompt = (
                    f"You are a master storyteller who writes EXPLOSIVE endings.\\n"
                    f"Use the outline point to write a CLIMACTIC finale with maximum emotional impact.\\n"
                    f"Outline Point: {point}\\n\\n"
                    f"Story Summary So Far: {story_summary}\\n\\n"
                    f"Previous Section Ending:\\n{ending_paragraphs}\\n\\n"
                    f"Story Elements to Maintain: {story_elements}\\n\\n"
                    f"CRITICAL WRITING RULES:\\n"
                    f"- Continue SEAMLESSLY from the previous section's exact ending\\n"
                    f"- Build to an EXPLOSIVE climax with maximum stakes\\n"
                    f"- Include shocking revelations, betrayals, or plot twists\\n"
                    f"- Make every sentence count - cut all fluff and filler\\n"
                    f"- Use rapid-fire dialogue and intense action sequences\\n"
                    f"- Create emotional whiplash - joy to terror to triumph\\n"
                    f"- End with a satisfying but surprising conclusion\\n"
                    f"- Keep readers on edge until the very last word\\n"
                    f"Write 500+ words of HEART-POUNDING conclusion.\\n"
                    f"ONLY provide the story - no titles, headers, or explanations.\\n"
                )
            else:
                prompt = (
                    f"You are a master storyteller who writes ADDICTIVE fiction.\\n"
                    f"Continue this story with RELENTLESS pacing and constant surprises.\\n"
                    f"Outline Point: {point}\\n\\n"
                    f"Story Summary So Far: {story_summary}\\n\\n"
                    f"Previous Section Ending:\\n{ending_paragraphs}\\n\\n"
                    f"Story Elements to Maintain: {story_elements}\\n\\n"
                    f"CRITICAL WRITING RULES:\\n"
                    f"- Continue SEAMLESSLY from the previous section's exact ending\\n"
                    f"- Every 2-3 paragraphs must have a twist, revelation, or tension spike\\n"
                    f"- Cut ALL boring exposition - show through action and dialogue\\n"
                    f"- Use cliffhangers, shocking moments, and emotional rollercoasters\\n"
                    f"- Make readers' hearts race - constant danger, conflict, or mystery\\n"
                    f"- Include rapid dialogue exchanges and internal panic/excitement\\n"
                    f"- End with a MAJOR hook or cliffhanger for the next section\\n"
                    f"- Keep the pace breakneck - something exciting every 30 seconds of reading\\n"
                    f"- Focus on high-stakes moments, not mundane details\\n"
                    f"Write 500+ words of PULSE-POUNDING narrative that's impossible to put down.\\n"
                    f"ONLY provide the story - no titles, headers, or explanations.\\n"
                )

            data = {
                "model": "nvidia/llama-3.3-nemotron-super-49b-v1:free",
                "messages": [
                    {"role": "user", "content": prompt}
                ]
            }

            response = requests.post(url, headers=headers, data=json.dumps(data))
            if response.status_code == 200:
                result = response.json()
                raw_story = result['choices'][0]['message']['content']
                return clean_story_output(raw_story)
            else:
                print(f"Error {response.status_code}: {response.text}")
                return None

        def main():
            full_story = ""
            total_points = len(outline_points)
            for idx, point in enumerate(outline_points, start=1):
                print(f"--- Generating story part {idx} ---")
                story_part = generate_story_part(point, full_story, idx, total_points)
                if story_part:
                    print(story_part)
                    print("\\n")
                    # Add smooth connection between parts
                    if full_story.strip():
                        full_story += "\\n\\n" + story_part
                    else:
                        full_story = story_part
                    # Add delay between API calls and extra delay after summary generation
                    time.sleep(3 if idx > 1 else 2)
                else:
                    print(f"Failed to generate part {idx}. Stopping.")
                    break

            with open("generated_story.txt", "w") as f:
                f.write(full_story.strip())

        if __name__ == "__main__":
            main()
        EOF

    - name: Set up Git identity
      run: |
        git config --global user.name "ansentase"
        git config --global user.email "samomsan7@gmail.com"

    - name: Commit and push generated story
      env:
        GH_PAT: ${{ secrets.GH_PAT }}
      run: |
        git add generated_story.txt
        timestamp=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        git commit -m "Generated story: ${timestamp}" || echo "No changes to commit"
        git push https://x-access-token:${GH_PAT}@github.com/ansentase/scriptgen.git HEAD:main
