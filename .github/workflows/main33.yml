name: Generate Story from Outline

on:
  workflow_dispatch:
    inputs:
      outline_text:
        description: 'Story outline (each point on a new line)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  generate-story:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Run Story Generator
      env:
        INPUT_OUTLINE_TEXT: ${{ github.event.inputs.outline_text }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      run: |
        python3 - <<EOF
        import os
        import json
        import time
        import requests
        import re

        outline_text = os.getenv("INPUT_OUTLINE_TEXT", "")
        outline_sections = re.split(r'\n(?=\d+\.\s)', outline_text.strip())
        outline_points = [section.strip() for section in outline_sections if section.strip()]

        url = "https://openrouter.ai/api/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {os.getenv('OPENROUTER_API_KEY')}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://your-site.com",
            "X-Title": "Story Generator"
        }

        def clean_story_output(raw_text):
            lines = raw_text.splitlines()
            cleaned_lines = []
            skip_patterns = [
                r'^\s*(\*+|---+|###*|Point \d+.*|End of.*|Preparation for.*|Continuity Notes.*|Please Provide.*|Generating story.*|Context.*|Tone:.*|Events:.*|Character Development:.*|NOTE:.*)',
                r'.*outline.*'
            ]
            for line in lines:
                if any(re.match(pattern, line, re.IGNORECASE) for pattern in skip_patterns):
                    continue
                if "NOTE:" in line or line.strip().endswith(":"):
                    continue
                cleaned_lines.append(line)
            return '\n'.join(cleaned_lines).strip()

        def generate_story_part(point, context, index, total):
            is_first = index == 1
            is_last = index == total

            cinematic_prompt = (
                "\nAdditional Instructions:\n"
                "Write a dramatic, cinematic storytelling passage focused on a key moment or scene in the story. The style should be concise but emotionally powerful, like a gripping YouTube narration script.\n"
                "Start with an emotional hook — show what’s at stake for the protagonist immediately.\n"
                "Use simple, punchy language suitable for spoken narration; avoid literary or overly complex phrasing.\n"
                "Avoid vague or abstract lines — ground all descriptions in concrete detail that listeners can visualize.\n"
                "Sharpen the pacing — trim repetitive or overly descriptive moments that slow down the momentum.\n"
                "Highlight the protagonist’s internal motivation early and clearly. Why does this moment matter emotionally?\n"
                "Add immersive sensory detail — what do we see, hear, feel, or smell? Brief, but vivid.\n"
                "Show characters through actions and impactful dialogue — minimize exposition.\n"
                "Reveal stakes, mysteries, or secrets gradually through conflict or tension.\n"
                "Use short paragraphs and varied sentence lengths to enhance flow.\n"
                "Include a suspenseful turn or emotional beat that deepens audience engagement.\n"
                "End with a cliffhanger, twist, or powerful emotional beat that invites the listener to keep watching.\n"
                "Keep narration vivid but always clear. Don’t get poetic — get personal, raw, and real.\n"
                "If appropriate, include a call to action (e.g., like/comment) before the next part.\n"
                # Added concise improvements based on your detailed feedback:
                "Begin with a gripping in-media-res moment before revealing backstory to boost retention.\n"
                "Use dialogue that implies rather than explains — avoid expositional speeches.\n"
                "Introduce immediate threats or obstacles beyond the protagonist’s self-doubt or time pressure.\n"
                "Show fleeting vulnerability in the protagonist before their resolve to enhance realism.\n"
                "Portray antagonists with subtle, chilling politeness rather than overt cruelty.\n"
                "Imply hidden motives for key character actions to add depth and plausibility.\n"
                "Clarify stakes by hinting at real consequences (e.g., exile, loss of reputation) without over-explaining.\n"
                "Tighten metaphors to avoid redundancy and keep prose punchy.\n"
                "Make dialogue rhythm snappy and impactful — short, varied sentences work best.\n"
                "Add brief sensory or emotional flashbacks tied to the protagonist’s backstory to enrich motivation.\n"
                "Close with a thematic callback or a twist on a recurring motif to leave a lasting impression.\n"
            )

            if is_first:
                prompt = (
                    f"You are a professional storyteller.\n"
                    f"Begin the story from scratch using the outline point below.\n"
                    f"This is the very beginning, so introduce the protagonist, setting, and tone naturally.\n"
                    f"Outline Point: {point}\n\n"
                    f"Write at least 500 words for this section.\n"
                    f"Make sure to set the stage clearly and begin the narrative with no assumed prior events.\n"
                    f"Please ONLY provide the story narrative in plain text.\n"
                    f"Do NOT include any titles, section headers, explanations, or any text outside of the story.\n"
                    f"Write naturally and engagingly as if for a novel or screenplay.\n"
                    + cinematic_prompt
                )
            elif is_last:
                prompt = (
                    f"You are a professional storyteller.\n"
                    f"Continue the story using the outline point below.\n"
                    f"This is the final part, so bring emotional and narrative closure.\n"
                    f"Outline Point: {point}\n\n"
                    f"Write at least 500 words.\n"
                    f"Ensure the narrative is compelling, cinematic, and leaves a strong impression.\n"
                    f"Please ONLY provide the story narrative in plain text.\n"
                    f"Do NOT include any titles, section headers, explanations, or text outside the story.\n"
                    + cinematic_prompt
                )
            else:
                prompt = (
                    f"You are a professional storyteller.\n"
                    f"Continue the story from prior parts, following the outline point below.\n"
                    f"Build upon previous context naturally, adding depth and tension.\n"
                    f"Outline Point: {point}\n\n"
                    f"Write at least 500 words.\n"
                    f"Keep the tone cinematic and emotionally engaging.\n"
                    f"Please ONLY provide the story narrative in plain text.\n"
                    f"Do NOT include titles, section headers, or explanations.\n"
                    + cinematic_prompt
                )

            messages = []
            if context:
                messages.append({"role": "system", "content": "You are a skilled storyteller creating cinematic, emotionally gripping stories."})
                messages.append({"role": "user", "content": f"Previous story context:\n{context}"})
            else:
                messages.append({"role": "system", "content": "You are a skilled storyteller creating cinematic, emotionally gripping stories."})

            messages.append({"role": "user", "content": prompt})

            payload = {
                "model": "gpt-4o-mini",
                "messages": messages,
                "max_tokens": 1500,
                "temperature": 0.7,
                "top_p": 1,
                "frequency_penalty": 0,
                "presence_penalty": 0
            }

            response = requests.post(url, headers=headers, json=payload)
            response.raise_for_status()
            result = response.json()
            story_raw = result["choices"][0]["message"]["content"]
            return clean_story_output(story_raw)

        total_points = len(outline_points)
        story_context = ""
        full_story = ""

        for i, point in enumerate(outline_points, 1):
            story_part = generate_story_part(point, story_context, i, total_points)
            full_story += story_part + "\n\n"
            story_context += story_part + "\n"

            time.sleep(2)  # brief pause between calls to avoid rate limits

        print(full_story.strip())
        EOF
