name: Generate Story from Outline

on:
  workflow_dispatch:
    inputs:
      outline_text:
        description: 'Story outline (each point on a new line)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  generate-story:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Story Generator
        env:
          INPUT_OUTLINE_TEXT: ${{ github.event.inputs.outline_text }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          python3 - <<EOF
          import os
          import json
          import time
          import requests
          import re

          outline_text = os.getenv("INPUT_OUTLINE_TEXT", "")
          outline_sections = re.split(r'\n(?=\d+\.\s)', outline_text.strip())
          outline_points = [section.strip() for section in outline_sections if section.strip()]

          url = "https://openrouter.ai/api/v1/chat/completions"
          headers = {
              "Authorization": f"Bearer {os.getenv('OPENROUTER_API_KEY')}",
              "Content-Type": "application/json",
              "HTTP-Referer": "https://your-site.com",
              "X-Title": "Story Generator"
          }

          def clean_story_output(raw_text):
              lines = raw_text.splitlines()
              cleaned_lines = []
              skip_patterns = [
                  r'^\s*(\*+|---+|###*|Point \d+.*|End of.*|Preparation for.*|Continuity Notes.*|Please Provide.*|Generating story.*|Context.*|Tone:.*|Events:.*|Character Development:.*|NOTE:.*)',
                  r'.*outline.*'
              ]
              for line in lines:
                  if any(re.match(pattern, line, re.IGNORECASE) for pattern in skip_patterns):
                      continue
                  if "NOTE:" in line or line.strip().endswith(":"):
                      continue
                  cleaned_lines.append(line)
              return '\n'.join(cleaned_lines).strip()

          def generate_story_part(point, context, index, total):
              is_first = index == 1
              is_last = index == total

              cinematic_prompt = (
                  "\nAdditional Instructions:\n"
                  "Write in a monologue-style narration tone — as if a storyteller is recounting a dramatic true story.\n"
                  "The narrative must be emotionally gripping, cinematic, and vivid in tone — avoid passive exposition.\n"
                  "Begin with an explosive or emotionally charged moment. Do not slowly build up. Hook immediately.\n"
                  "Describe only what is necessary to make readers *feel* the tension — don't over-explain.\n"
                  "Show emotion through subtle actions, voice, atmosphere, and sharp dialogue — not through plain statements.\n"
                  "End every part with a powerful cliffhanger or haunting question that leaves the audience needing to know what comes next.\n"
                  "Use short paragraphs, sentence variety, and pacing like a voiceover YouTube drama.\n"
                  "Write like you are telling this to a friend — real, raw, intense — not like writing a novel.\n"
              )

              if is_first:
                  prompt = (
                      f"You are a master narrator writing a powerful, voiceover-style drama script for YouTube.\n"
                      f"This is the beginning of the story. Introduce the key character, injustice, tone, and hook right away.\n"
                      f"Outline Point: {point}\n\n"
                      f"Write at least 500 words for this part.\n"
                      f"Only output the story — no titles, no explanation, no notes.\n"
                      + cinematic_prompt
                  )
              elif is_last:
                  prompt = (
                      f"You are a master narrator finishing a dramatic, serialized story.\n"
                      f"Use the outline point below to conclude the story in an emotionally powerful and satisfying way.\n"
                      f"Outline Point: {point}\n\n"
                      f"Previous Story Context:\n{context}\n\n"
                      f"Write at least 500 words.\n"
                      f"Keep tone, characters, and emotions consistent. Resolve the core conflict.\n"
                      f"Only output the story — no titles, no explanation, no notes.\n"
                      + cinematic_prompt
                  )
              else:
                  prompt = (
                      f"You are a professional narrator continuing a cinematic drama story.\n"
                      f"Use the outline point below and continue coherently from the story so far.\n"
                      f"Outline Point: {point}\n\n"
                      f"Previous Story Context:\n{context}\n\n"
                      f"Write at least 500 words.\n"
                      f"Ensure continuity, emotional tone, and character consistency.\n"
                      f"Only output the story — no titles, no explanation, no notes.\n"
                      + cinematic_prompt
                  )

              data = {
                  "model": "nvidia/llama-3.3-nemotron-super-49b-v1:free",
                  "messages": [
                      {"role": "user", "content": prompt}
                  ]
              }

              response = requests.post(url, headers=headers, data=json.dumps(data))
              if response.status_code == 200:
                  result = response.json()
                  raw_story = result['choices'][0]['message']['content']
                  return clean_story_output(raw_story)
              else:
                  print(f"Error {response.status_code}: {response.text}")
                  return None

          def main():
              full_story = ""
              total_points = len(outline_points)
              for idx, point in enumerate(outline_points, start=1):
                  print(f"--- Generating story part {idx} ---")
                  story_part = generate_story_part(point, full_story, idx, total_points)
                  if story_part:
                      print(story_part)
                      print("\n")
                      full_story += "\n" + story_part
                      time.sleep(2)
                  else:
                      print(f"Failed to generate part {idx}. Stopping.")
                      break

              with open("generated_story.txt", "w") as f:
                  f.write(full_story.strip())

          if __name__ == "__main__":
              main()
          EOF

      - name: Set up Git identity
        run: |
          git config --global user.name "ansentase"
          git config --global user.email "samomsan7@gmail.com"

      - name: Commit and push generated story
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git add generated_story.txt
          timestamp=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          git commit -m "Generated story: ${timestamp}" || echo "No changes to commit"
          git push https://x-access-token:${GH_PAT}@github.com/ansentase/scriptgen.git HEAD:main
